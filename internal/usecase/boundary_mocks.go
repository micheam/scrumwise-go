// Code generated by MockGen. DO NOT EDIT.
// Source: boundary.go

// Package usecase is a generated GoMock package.
package usecase

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	scrumwise "github.com/micheam/wiseman/scrumwise"
	reflect "reflect"
)

// MockPersonGateway is a mock of PersonGateway interface
type MockPersonGateway struct {
	ctrl     *gomock.Controller
	recorder *MockPersonGatewayMockRecorder
}

// MockPersonGatewayMockRecorder is the mock recorder for MockPersonGateway
type MockPersonGatewayMockRecorder struct {
	mock *MockPersonGateway
}

// NewMockPersonGateway creates a new mock instance
func NewMockPersonGateway(ctrl *gomock.Controller) *MockPersonGateway {
	mock := &MockPersonGateway{ctrl: ctrl}
	mock.recorder = &MockPersonGatewayMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPersonGateway) EXPECT() *MockPersonGatewayMockRecorder {
	return m.recorder
}

// List mocks base method
func (m *MockPersonGateway) List(ctx context.Context) ([]*scrumwise.Person, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx)
	ret0, _ := ret[0].([]*scrumwise.Person)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockPersonGatewayMockRecorder) List(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockPersonGateway)(nil).List), ctx)
}

// Get mocks base method
func (m *MockPersonGateway) Get(ctx context.Context, id string) (*scrumwise.Person, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*scrumwise.Person)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockPersonGatewayMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockPersonGateway)(nil).Get), ctx, id)
}
